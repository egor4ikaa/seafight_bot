import copy
import random
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
FIELD_SIZE = 8
MINE_COUNT = 10


# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
LEXICON = {
    "/start": "–í–æ—Ç —Ç–≤–æ—ë –ø–æ–ª–µ. –ú–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ö–æ–¥",
    "/help": "–°–∞–ø—ë—Ä ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞! –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö. "
             "–ù–µ –ø–æ–ø–∞–¥–∏—Å—å –Ω–∞ –º–∏–Ω—É! üí£\n–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
    "closed": "‚¨ú",
    "mine": "üí£",
    "empty": " ",
    "used": "–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ —ç—Ç—É –∫–ª–µ—Ç–∫—É!",
    "hit_mine": "üí• –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.",
    "next_move": "–î–µ–ª–∞–π—Ç–µ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥",
    "win": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏!",
    "flags": "üö©",
}

# –•–∞—Ä–¥–∫–æ–¥–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
users: dict[int, dict] = {}


# –°–æ–∑–¥–∞—ë–º —Å–≤–æ–π –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–µ—Ñ–∏–∫—Å
# –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É callback_data
class FieldCallbackFactory(CallbackData, prefix="minesweeper"):
    x: int
    y: int


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def generate_mines(seed_field: list[list[int]], mine_count: int):
    "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ."
    positions = [(i, j) for i in range(FIELD_SIZE) for j in range(FIELD_SIZE)]
    mine_positions = random.sample(positions, mine_count)
    for x, y in mine_positions:
        seed_field[x][y] = -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –º–∏–Ω—É

def count_mines_around(field: list[list[int]], x: int, y: int) -> int:
    "–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ (x, y)."
    count = 0
    for dx in (-1, 0, 1):
        for dy in (-1, 0, 1):
            nx, ny = x + dx, y + dy
            if 0 <= nx < FIELD_SIZE and 0 <= ny < FIELD_SIZE:
                if field[nx][ny] == -1:
                    count += 1
    return count
def generate_hint_field(mine_field: list[list[int]]) -> list[list[int]]:
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ (—á–∏—Å–ª–∞ –≤–æ–∫—Ä—É–≥ –º–∏–Ω)."""
    hint_field = [[0 for _ in range(FIELD_SIZE)] for _ in range(FIELD_SIZE)]
    for i in range(FIELD_SIZE):
        for j in range(FIELD_SIZE):
            if mine_field[i][j] == -1:
                hint_field[i][j] = -1
            else:
                hint_field[i][j] = count_mines_around(mine_field, i, j)
    return hint_field

# ... (–≤—Å—ë, —á—Ç–æ –¥–æ reset_game, –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def reset_game(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    mine_field = [[0 for _ in range(FIELD_SIZE)] for _ in range(FIELD_SIZE)]
    generate_mines(mine_field, MINE_COUNT)
    hint_field = generate_hint_field(mine_field)
    revealed = [[0 for _ in range(FIELD_SIZE)] for _ in range(FIELD_SIZE)]
    flags = [[0 for _ in range(FIELD_SIZE)] for _ in range(FIELD_SIZE)]  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è flags

    users[user_id] = {
        "mine_field": mine_field,
        "hint_field": hint_field,
        "revealed": revealed,
        "game_over": False,
        "won": False,
        "flags": flags
    }

# ... (get_field_keyboard –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º –æ–ø–µ—á–∞—Ç–∫—É)

def get_field_keyboard(user_id: int) -> InlineKeyboardMarkup:
    user_data = users[user_id]
    revealed = user_data["revealed"]
    flags = user_data["flags"]
    hint_field = user_data["hint_field"]
    mine_field = user_data["mine_field"]
    game_over = user_data["game_over"]

    buttons = []
    for i in range(FIELD_SIZE):
        row = []
        for j in range(FIELD_SIZE):
            if revealed[i][j] == 1:
                if hint_field[i][j] == -1:
                    row.append(InlineKeyboardButton(text=LEXICON["mine"], callback_data="noop"))
                elif hint_field[i][j] == 0:
                    row.append(InlineKeyboardButton(text=LEXICON["empty"], callback_data="noop"))
                else:
                    row.append(InlineKeyboardButton(text=str(hint_field[i][j]), callback_data="noop"))
            else:
                if flags[i][j] == 1:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–∞–∂–æ–∫
                    row.append(
                        InlineKeyboardButton(
                            text=LEXICON["flags"],  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ "flag", –Ω–æ –≤ LEXICON –∫–ª—é—á "flags"
                            callback_data="noop",   # —Ñ–ª–∞–∂–∫–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
                        )
                    )
                elif game_over and mine_field[i][j] == -1:
                    row.append(InlineKeyboardButton(text=LEXICON["mine"], callback_data="noop"))
                else:
                    row.append(
                        InlineKeyboardButton(
                            text=LEXICON["closed"],
                            callback_data=FieldCallbackFactory(x=i, y=j).pack(),
                        )
                    )
        buttons.append(row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ... (reveal_empty_area –∏ check_win –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


@dp.message(CommandStart())
async def process_start_command(message: Message):
    user_id = message.from_user.id
    reset_game(user_id)
    await message.answer(
        text=LEXICON["/start"],
        reply_markup=get_field_keyboard(user_id)
    )


@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(LEXICON["/help"])


# üîπ –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: /flag x y
@dp.message(Command(commands='flag'))
async def process_flag_command(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    user_data = users[user_id]
    if user_data["game_over"]:
        await message.answer("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError
        x = int(parts[1])
        y = int(parts[2])
        if not (0 <= x < FIELD_SIZE and 0 <= y < FIELD_SIZE):
            raise ValueError
    except (ValueError, IndexError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /flag X Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: /flag 2 3), –≥–¥–µ X –∏ Y ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç 0 –¥–æ 7.")
        return

    flags = user_data["flags"]
    revealed = user_data["revealed"]

    if revealed[x][y] == 1:
        await message.answer("–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–∂–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–ª–µ—Ç–∫—É!")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–∂–æ–∫
    if flags[x][y] == 1:
        flags[x][y] = 0
        await message.answer(f"–§–ª–∞–∂–æ–∫ —Å –∫–ª–µ—Ç–∫–∏ ({x}, {y}) —É–±—Ä–∞–Ω.")
    else:
        flags[x][y] = 1
        await message.answer(f"–§–ª–∞–∂–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–ª–µ—Ç–∫—É ({x}, {y}).")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    try:
        await message.answer(
            text=LEXICON["next_move"],
            reply_markup=get_field_keyboard(user_id)
        )
    except TelegramBadRequest:
        pass


# üîπ –¢–µ–ø–µ—Ä—å –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É = –û–¢–ö–†–´–¢–¨, –∞ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–∂–æ–∫!
@dp.callback_query(FieldCallbackFactory.filter())
async def process_cell_press(callback: CallbackQuery, callback_data: FieldCallbackFactory):
    user_id = callback.from_user.id
    x, y = callback_data.x, callback_data.y

    if user_id not in users:
        await callback.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    user_data = users[user_id]
    if user_data["game_over"]:
        await callback.answer("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
        return

    revealed = user_data["revealed"]
    mine_field = user_data["mine_field"]
    flags = user_data["flags"]

    if revealed[x][y] == 1:
        await callback.answer(LEXICON["used"])
        return

    if flags[x][y] == 1:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–∂–æ–∫ —Å —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /flag.")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É
    revealed[x][y] = 1

    # –ü–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É?
    if mine_field[x][y] == -1:
        user_data["game_over"] = True
        await callback.message.edit_text(
            text=LEXICON["hit_mine"],
            reply_markup=get_field_keyboard(user_id)
        )
        return

    # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è ‚Äî —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å
    if user_data["hint_field"][x][y] == 0:
        reveal_empty_area(user_id, x, y)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
    if check_win(user_id):
        user_data["won"] = True
        user_data["game_over"] = True
        await callback.message.edit_text(
            text=LEXICON["win"],
            reply_markup=get_field_keyboard(user_id)
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    try:
        await callback.message.edit_text(
            text=LEXICON["next_move"],
            reply_markup=get_field_keyboard(user_id)
        )
    except TelegramBadRequest:
        pass


@dp.callback_query(lambda c: c.data == "noop")
async def noop_callback(callback: CallbackQuery):
    await callback.answer()
